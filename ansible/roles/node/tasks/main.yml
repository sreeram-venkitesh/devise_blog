---

# https://github.com/morgangraphics/ansible-role-nvm/issues/18
- name: determine shell in which we are running
  block:
    - name: set bash command
      set_fact:
        user_shell: { 'command': '/usr/bin/bash -ic', 'alias': 'bash' }
      when: '"bash" in nvm_profile'

    - name: does profile file exist
      stat:
        path: "{{ nvm_profile }}"
      register: profile_file

    - name: Create profile file if it does not exist
      file:
        mode: 0777
        path: "{{ nvm_profile }}"
        state: touch
      when: not profile_file.stat.exists
      become: true

  when: nvm_profile | length != 0

- name: Create nvm_dir if it does not exist
  file:
    mode: 0775
    path: "{{ nvm_dir }}"
    state: directory
  become: true
  when: nvm_dir | length != 0

- name: Install NVM
  shell: "curl -o- https://raw.githubusercontent.com/creationix/nvm/v{{ nvm_version }}/install.sh | NVM_SOURCE={{ nvm_source }} NVM_DIR={{ nvm_dir }} PROFILE={{ nvm_profile }} {{ user_shell.alias }}"
  args:
    warn: false
  register: nvm_result
  changed_when: "'already installed' not in nvm_result.stdout"
  failed_when:
    - "'permission denied' in nvm_result.stderr"

- name: Update profile permissions to lock it down after writing
  file:
    mode: 0644
    path: "{{ nvm_profile }}"
  become: true
  when: not profile_file.stat.exists

- name: Check NVM Version
  shell: "{{ user_shell.command + ' \"nvm --version\"' }}"
  register: nvm_version_response
  changed_when: "nvm_version_response.rc != 0"

# Autocomplete
- name: Add NVM autocomplete to nvm_profile
  blockinfile:
    block: |
      [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion
    insertafter: "# This loads nvm"
    marker_begin: "Installed nvm autocomplete via {{ role_repo }} START"
    marker_end: "{{ role_repo }} END"
    mode: 0644
    path: "{{ nvm_profile }}"
    state: present
  when: autocomplete

# This scenario handles the first run/install of NVM because this will automatically
# alias the specified version as default - This should handle most use cases
- name: Install Node # noqa 305
  shell: "{{ user_shell.command + ' \"nvm install ' +  nodejs_version + '\"' }}"
  register: node_version_response
  changed_when: "'already installed' not in node_version_response.stderr"

# In the event there are multiple versions of Node being installed/used/upgraded
# on the same machine we'll need to alias the default version accordingly
- name: Set default version of Node if multiple versions exist # noqa 305
  shell: "{{ user_shell.command + ' \"nvm alias default ' +  nodejs_version + '\"' }}"
  when:  default

- name: Run whatever nvm_commands are there
  shell: "{{ user_shell.command + ' \"' +  item + '\"' }}"
  with_items:
    "{{ nvm_commands }}"
  when: nvm_commands | length > 0

# Uninstall NVM
- name: uninstall nvm
  block:

  - name: Uninstall NVM
    file:
      path: "{{ lookup('env','NVM_DIR') }}"
      state: absent

  - name: Remove NVM nvm_profile info
    lineinfile:
      regexp: '^export.+nvm\"|\[.+nvm'
      path: "{{ nvm_profile }}"
      state: absent

  - name: Remove NVM autocomplete from nvm_profile
    blockinfile:
      block: |
        [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion
      marker_begin: "Installed via {{ role_repo }} START"
      marker_end: "{{ role_repo }} END"
      path: "{{ nvm_profile }}"
      state: absent

  when: uninstall | bool
